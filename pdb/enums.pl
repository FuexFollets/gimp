# LIGMA - The GNU Image Manipulation Program
# Copyright (C) 1999-2003 Manish Singh <yosh@ligma.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUTFILE ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# autogenerated by enumgen.pl

package Ligma::CodeGen::enums;

%enums = (
    GeglDistanceMetric =>
	{ contig => 1,
	  external => 1,
	  symbols => [ qw(GEGL_DISTANCE_METRIC_EUCLIDEAN
			  GEGL_DISTANCE_METRIC_MANHATTAN
			  GEGL_DISTANCE_METRIC_CHEBYSHEV) ],
	  mapping => { GEGL_DISTANCE_METRIC_EUCLIDEAN => '0',
		       GEGL_DISTANCE_METRIC_MANHATTAN => '1',
		       GEGL_DISTANCE_METRIC_CHEBYSHEV => '2' }
	},
    LigmaAddMaskType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_ADD_MASK_WHITE LIGMA_ADD_MASK_BLACK
			  LIGMA_ADD_MASK_ALPHA LIGMA_ADD_MASK_ALPHA_TRANSFER
			  LIGMA_ADD_MASK_SELECTION LIGMA_ADD_MASK_COPY
			  LIGMA_ADD_MASK_CHANNEL) ],
	  mapping => { LIGMA_ADD_MASK_WHITE => '0',
		       LIGMA_ADD_MASK_BLACK => '1',
		       LIGMA_ADD_MASK_ALPHA => '2',
		       LIGMA_ADD_MASK_ALPHA_TRANSFER => '3',
		       LIGMA_ADD_MASK_SELECTION => '4',
		       LIGMA_ADD_MASK_COPY => '5',
		       LIGMA_ADD_MASK_CHANNEL => '6' }
	},
    LigmaBrushGeneratedShape =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_BRUSH_GENERATED_CIRCLE
			  LIGMA_BRUSH_GENERATED_SQUARE
			  LIGMA_BRUSH_GENERATED_DIAMOND) ],
	  mapping => { LIGMA_BRUSH_GENERATED_CIRCLE => '0',
		       LIGMA_BRUSH_GENERATED_SQUARE => '1',
		       LIGMA_BRUSH_GENERATED_DIAMOND => '2' }
	},
    LigmaCapStyle =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_CAP_BUTT LIGMA_CAP_ROUND LIGMA_CAP_SQUARE) ],
	  mapping => { LIGMA_CAP_BUTT => '0',
		       LIGMA_CAP_ROUND => '1',
		       LIGMA_CAP_SQUARE => '2' }
	},
    LigmaChannelOps =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_CHANNEL_OP_ADD LIGMA_CHANNEL_OP_SUBTRACT
			  LIGMA_CHANNEL_OP_REPLACE LIGMA_CHANNEL_OP_INTERSECT) ],
	  mapping => { LIGMA_CHANNEL_OP_ADD => '0',
		       LIGMA_CHANNEL_OP_SUBTRACT => '1',
		       LIGMA_CHANNEL_OP_REPLACE => '2',
		       LIGMA_CHANNEL_OP_INTERSECT => '3' }
	},
    LigmaChannelType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_CHANNEL_RED LIGMA_CHANNEL_GREEN
			  LIGMA_CHANNEL_BLUE LIGMA_CHANNEL_GRAY
			  LIGMA_CHANNEL_INDEXED LIGMA_CHANNEL_ALPHA) ],
	  mapping => { LIGMA_CHANNEL_RED => '0',
		       LIGMA_CHANNEL_GREEN => '1',
		       LIGMA_CHANNEL_BLUE => '2',
		       LIGMA_CHANNEL_GRAY => '3',
		       LIGMA_CHANNEL_INDEXED => '4',
		       LIGMA_CHANNEL_ALPHA => '5' }
	},
    LigmaCloneType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_CLONE_IMAGE LIGMA_CLONE_PATTERN) ],
	  mapping => { LIGMA_CLONE_IMAGE => '0',
		       LIGMA_CLONE_PATTERN => '1' }
	},
    LigmaColorTag =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_COLOR_TAG_NONE LIGMA_COLOR_TAG_BLUE
			  LIGMA_COLOR_TAG_GREEN LIGMA_COLOR_TAG_YELLOW
			  LIGMA_COLOR_TAG_ORANGE LIGMA_COLOR_TAG_BROWN
			  LIGMA_COLOR_TAG_RED LIGMA_COLOR_TAG_VIOLET
			  LIGMA_COLOR_TAG_GRAY) ],
	  mapping => { LIGMA_COLOR_TAG_NONE => '0',
		       LIGMA_COLOR_TAG_BLUE => '1',
		       LIGMA_COLOR_TAG_GREEN => '2',
		       LIGMA_COLOR_TAG_YELLOW => '3',
		       LIGMA_COLOR_TAG_ORANGE => '4',
		       LIGMA_COLOR_TAG_BROWN => '5',
		       LIGMA_COLOR_TAG_RED => '6',
		       LIGMA_COLOR_TAG_VIOLET => '7',
		       LIGMA_COLOR_TAG_GRAY => '8' }
	},
    LigmaComponentType =>
	{ contig => 0,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_COMPONENT_TYPE_U8 LIGMA_COMPONENT_TYPE_U16
			  LIGMA_COMPONENT_TYPE_U32 LIGMA_COMPONENT_TYPE_HALF
			  LIGMA_COMPONENT_TYPE_FLOAT
			  LIGMA_COMPONENT_TYPE_DOUBLE) ],
	  mapping => { LIGMA_COMPONENT_TYPE_U8 => '100',
		       LIGMA_COMPONENT_TYPE_U16 => '200',
		       LIGMA_COMPONENT_TYPE_U32 => '300',
		       LIGMA_COMPONENT_TYPE_HALF => '500',
		       LIGMA_COMPONENT_TYPE_FLOAT => '600',
		       LIGMA_COMPONENT_TYPE_DOUBLE => '700' }
	},
    LigmaConvertPaletteType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_CONVERT_PALETTE_GENERATE
			  LIGMA_CONVERT_PALETTE_WEB LIGMA_CONVERT_PALETTE_MONO
			  LIGMA_CONVERT_PALETTE_CUSTOM) ],
	  mapping => { LIGMA_CONVERT_PALETTE_GENERATE => '0',
		       LIGMA_CONVERT_PALETTE_WEB => '1',
		       LIGMA_CONVERT_PALETTE_MONO => '2',
		       LIGMA_CONVERT_PALETTE_CUSTOM => '3' }
	},
    LigmaConvolveType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_CONVOLVE_BLUR LIGMA_CONVOLVE_SHARPEN) ],
	  mapping => { LIGMA_CONVOLVE_BLUR => '0',
		       LIGMA_CONVOLVE_SHARPEN => '1' }
	},
    LigmaDesaturateMode =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_DESATURATE_LIGHTNESS LIGMA_DESATURATE_LUMA
			  LIGMA_DESATURATE_AVERAGE LIGMA_DESATURATE_LUMINANCE
			  LIGMA_DESATURATE_VALUE) ],
	  mapping => { LIGMA_DESATURATE_LIGHTNESS => '0',
		       LIGMA_DESATURATE_LUMA => '1',
		       LIGMA_DESATURATE_AVERAGE => '2',
		       LIGMA_DESATURATE_LUMINANCE => '3',
		       LIGMA_DESATURATE_VALUE => '4' }
	},
    LigmaDodgeBurnType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_DODGE_BURN_TYPE_DODGE
			  LIGMA_DODGE_BURN_TYPE_BURN) ],
	  mapping => { LIGMA_DODGE_BURN_TYPE_DODGE => '0',
		       LIGMA_DODGE_BURN_TYPE_BURN => '1' }
	},
    LigmaFillType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_FILL_FOREGROUND LIGMA_FILL_BACKGROUND
			  LIGMA_FILL_WHITE LIGMA_FILL_TRANSPARENT
			  LIGMA_FILL_PATTERN) ],
	  mapping => { LIGMA_FILL_FOREGROUND => '0',
		       LIGMA_FILL_BACKGROUND => '1',
		       LIGMA_FILL_WHITE => '2',
		       LIGMA_FILL_TRANSPARENT => '3',
		       LIGMA_FILL_PATTERN => '4' }
	},
    LigmaForegroundExtractMode =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_FOREGROUND_EXTRACT_MATTING) ],
	  mapping => { LIGMA_FOREGROUND_EXTRACT_MATTING => '0' }
	},
    LigmaGradientBlendColorSpace =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_GRADIENT_BLEND_RGB_PERCEPTUAL
			  LIGMA_GRADIENT_BLEND_RGB_LINEAR
			  LIGMA_GRADIENT_BLEND_CIE_LAB) ],
	  mapping => { LIGMA_GRADIENT_BLEND_RGB_PERCEPTUAL => '0',
		       LIGMA_GRADIENT_BLEND_RGB_LINEAR => '1',
		       LIGMA_GRADIENT_BLEND_CIE_LAB => '2' }
	},
    LigmaGradientSegmentColor =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_GRADIENT_SEGMENT_RGB
			  LIGMA_GRADIENT_SEGMENT_HSV_CCW
			  LIGMA_GRADIENT_SEGMENT_HSV_CW) ],
	  mapping => { LIGMA_GRADIENT_SEGMENT_RGB => '0',
		       LIGMA_GRADIENT_SEGMENT_HSV_CCW => '1',
		       LIGMA_GRADIENT_SEGMENT_HSV_CW => '2' }
	},
    LigmaGradientSegmentType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_GRADIENT_SEGMENT_LINEAR
			  LIGMA_GRADIENT_SEGMENT_CURVED
			  LIGMA_GRADIENT_SEGMENT_SINE
			  LIGMA_GRADIENT_SEGMENT_SPHERE_INCREASING
			  LIGMA_GRADIENT_SEGMENT_SPHERE_DECREASING
			  LIGMA_GRADIENT_SEGMENT_STEP) ],
	  mapping => { LIGMA_GRADIENT_SEGMENT_LINEAR => '0',
		       LIGMA_GRADIENT_SEGMENT_CURVED => '1',
		       LIGMA_GRADIENT_SEGMENT_SINE => '2',
		       LIGMA_GRADIENT_SEGMENT_SPHERE_INCREASING => '3',
		       LIGMA_GRADIENT_SEGMENT_SPHERE_DECREASING => '4',
		       LIGMA_GRADIENT_SEGMENT_STEP => '5' }
	},
    LigmaGradientType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_GRADIENT_LINEAR LIGMA_GRADIENT_BILINEAR
			  LIGMA_GRADIENT_RADIAL LIGMA_GRADIENT_SQUARE
			  LIGMA_GRADIENT_CONICAL_SYMMETRIC
			  LIGMA_GRADIENT_CONICAL_ASYMMETRIC
			  LIGMA_GRADIENT_SHAPEBURST_ANGULAR
			  LIGMA_GRADIENT_SHAPEBURST_SPHERICAL
			  LIGMA_GRADIENT_SHAPEBURST_DIMPLED
			  LIGMA_GRADIENT_SPIRAL_CLOCKWISE
			  LIGMA_GRADIENT_SPIRAL_ANTICLOCKWISE) ],
	  mapping => { LIGMA_GRADIENT_LINEAR => '0',
		       LIGMA_GRADIENT_BILINEAR => '1',
		       LIGMA_GRADIENT_RADIAL => '2',
		       LIGMA_GRADIENT_SQUARE => '3',
		       LIGMA_GRADIENT_CONICAL_SYMMETRIC => '4',
		       LIGMA_GRADIENT_CONICAL_ASYMMETRIC => '5',
		       LIGMA_GRADIENT_SHAPEBURST_ANGULAR => '6',
		       LIGMA_GRADIENT_SHAPEBURST_SPHERICAL => '7',
		       LIGMA_GRADIENT_SHAPEBURST_DIMPLED => '8',
		       LIGMA_GRADIENT_SPIRAL_CLOCKWISE => '9',
		       LIGMA_GRADIENT_SPIRAL_ANTICLOCKWISE => '10' }
	},
    LigmaGridStyle =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_GRID_DOTS LIGMA_GRID_INTERSECTIONS
			  LIGMA_GRID_ON_OFF_DASH LIGMA_GRID_DOUBLE_DASH
			  LIGMA_GRID_SOLID) ],
	  mapping => { LIGMA_GRID_DOTS => '0',
		       LIGMA_GRID_INTERSECTIONS => '1',
		       LIGMA_GRID_ON_OFF_DASH => '2',
		       LIGMA_GRID_DOUBLE_DASH => '3',
		       LIGMA_GRID_SOLID => '4' }
	},
    LigmaHueRange =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_HUE_RANGE_ALL LIGMA_HUE_RANGE_RED
			  LIGMA_HUE_RANGE_YELLOW LIGMA_HUE_RANGE_GREEN
			  LIGMA_HUE_RANGE_CYAN LIGMA_HUE_RANGE_BLUE
			  LIGMA_HUE_RANGE_MAGENTA) ],
	  mapping => { LIGMA_HUE_RANGE_ALL => '0',
		       LIGMA_HUE_RANGE_RED => '1',
		       LIGMA_HUE_RANGE_YELLOW => '2',
		       LIGMA_HUE_RANGE_GREEN => '3',
		       LIGMA_HUE_RANGE_CYAN => '4',
		       LIGMA_HUE_RANGE_BLUE => '5',
		       LIGMA_HUE_RANGE_MAGENTA => '6' }
	},
    LigmaIconType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_ICON_TYPE_ICON_NAME LIGMA_ICON_TYPE_PIXBUF
			  LIGMA_ICON_TYPE_IMAGE_FILE) ],
	  mapping => { LIGMA_ICON_TYPE_ICON_NAME => '0',
		       LIGMA_ICON_TYPE_PIXBUF => '1',
		       LIGMA_ICON_TYPE_IMAGE_FILE => '2' }
	},
    LigmaImageBaseType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_RGB LIGMA_GRAY LIGMA_INDEXED) ],
	  mapping => { LIGMA_RGB => '0',
		       LIGMA_GRAY => '1',
		       LIGMA_INDEXED => '2' }
	},
    LigmaImageType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_RGB_IMAGE LIGMA_RGBA_IMAGE LIGMA_GRAY_IMAGE
			  LIGMA_GRAYA_IMAGE LIGMA_INDEXED_IMAGE
			  LIGMA_INDEXEDA_IMAGE) ],
	  mapping => { LIGMA_RGB_IMAGE => '0',
		       LIGMA_RGBA_IMAGE => '1',
		       LIGMA_GRAY_IMAGE => '2',
		       LIGMA_GRAYA_IMAGE => '3',
		       LIGMA_INDEXED_IMAGE => '4',
		       LIGMA_INDEXEDA_IMAGE => '5' }
	},
    LigmaInkBlobType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_INK_BLOB_TYPE_CIRCLE
			  LIGMA_INK_BLOB_TYPE_SQUARE
			  LIGMA_INK_BLOB_TYPE_DIAMOND) ],
	  mapping => { LIGMA_INK_BLOB_TYPE_CIRCLE => '0',
		       LIGMA_INK_BLOB_TYPE_SQUARE => '1',
		       LIGMA_INK_BLOB_TYPE_DIAMOND => '2' }
	},
    LigmaInterpolationType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_INTERPOLATION_NONE LIGMA_INTERPOLATION_LINEAR
			  LIGMA_INTERPOLATION_CUBIC LIGMA_INTERPOLATION_NOHALO
			  LIGMA_INTERPOLATION_LOHALO) ],
	  mapping => { LIGMA_INTERPOLATION_NONE => '0',
		       LIGMA_INTERPOLATION_LINEAR => '1',
		       LIGMA_INTERPOLATION_CUBIC => '2',
		       LIGMA_INTERPOLATION_NOHALO => '3',
		       LIGMA_INTERPOLATION_LOHALO => '4' }
	},
    LigmaJoinStyle =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_JOIN_MITER LIGMA_JOIN_ROUND LIGMA_JOIN_BEVEL) ],
	  mapping => { LIGMA_JOIN_MITER => '0',
		       LIGMA_JOIN_ROUND => '1',
		       LIGMA_JOIN_BEVEL => '2' }
	},
    LigmaMaskApplyMode =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_MASK_APPLY LIGMA_MASK_DISCARD) ],
	  mapping => { LIGMA_MASK_APPLY => '0',
		       LIGMA_MASK_DISCARD => '1' }
	},
    LigmaMergeType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_EXPAND_AS_NECESSARY LIGMA_CLIP_TO_IMAGE
			  LIGMA_CLIP_TO_BOTTOM_LAYER LIGMA_FLATTEN_IMAGE) ],
	  mapping => { LIGMA_EXPAND_AS_NECESSARY => '0',
		       LIGMA_CLIP_TO_IMAGE => '1',
		       LIGMA_CLIP_TO_BOTTOM_LAYER => '2',
		       LIGMA_FLATTEN_IMAGE => '3' }
	},
    LigmaMessageHandlerType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_MESSAGE_BOX LIGMA_CONSOLE LIGMA_ERROR_CONSOLE) ],
	  mapping => { LIGMA_MESSAGE_BOX => '0',
		       LIGMA_CONSOLE => '1',
		       LIGMA_ERROR_CONSOLE => '2' }
	},
    LigmaOffsetType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_OFFSET_BACKGROUND LIGMA_OFFSET_TRANSPARENT
			  LIGMA_OFFSET_WRAP_AROUND) ],
	  mapping => { LIGMA_OFFSET_BACKGROUND => '0',
		       LIGMA_OFFSET_TRANSPARENT => '1',
		       LIGMA_OFFSET_WRAP_AROUND => '2' }
	},
    LigmaOrientationType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_ORIENTATION_HORIZONTAL
			  LIGMA_ORIENTATION_VERTICAL LIGMA_ORIENTATION_UNKNOWN) ],
	  mapping => { LIGMA_ORIENTATION_HORIZONTAL => '0',
		       LIGMA_ORIENTATION_VERTICAL => '1',
		       LIGMA_ORIENTATION_UNKNOWN => '2' }
	},
    LigmaPaintApplicationMode =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_PAINT_CONSTANT LIGMA_PAINT_INCREMENTAL) ],
	  mapping => { LIGMA_PAINT_CONSTANT => '0',
		       LIGMA_PAINT_INCREMENTAL => '1' }
	},
    LigmaPDBErrorHandler =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_PDB_ERROR_HANDLER_INTERNAL
			  LIGMA_PDB_ERROR_HANDLER_PLUGIN) ],
	  mapping => { LIGMA_PDB_ERROR_HANDLER_INTERNAL => '0',
		       LIGMA_PDB_ERROR_HANDLER_PLUGIN => '1' }
	},
    LigmaPDBProcType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_PDB_PROC_TYPE_INTERNAL
			  LIGMA_PDB_PROC_TYPE_PLUGIN
			  LIGMA_PDB_PROC_TYPE_EXTENSION
			  LIGMA_PDB_PROC_TYPE_TEMPORARY) ],
	  mapping => { LIGMA_PDB_PROC_TYPE_INTERNAL => '0',
		       LIGMA_PDB_PROC_TYPE_PLUGIN => '1',
		       LIGMA_PDB_PROC_TYPE_EXTENSION => '2',
		       LIGMA_PDB_PROC_TYPE_TEMPORARY => '3' }
	},
    LigmaPDBStatusType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_PDB_EXECUTION_ERROR LIGMA_PDB_CALLING_ERROR
			  LIGMA_PDB_PASS_THROUGH LIGMA_PDB_SUCCESS
			  LIGMA_PDB_CANCEL) ],
	  mapping => { LIGMA_PDB_EXECUTION_ERROR => '0',
		       LIGMA_PDB_CALLING_ERROR => '1',
		       LIGMA_PDB_PASS_THROUGH => '2',
		       LIGMA_PDB_SUCCESS => '3',
		       LIGMA_PDB_CANCEL => '4' }
	},
    LigmaPrecision =>
	{ contig => 0,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_PRECISION_U8_LINEAR
			  LIGMA_PRECISION_U8_NON_LINEAR
			  LIGMA_PRECISION_U8_PERCEPTUAL
			  LIGMA_PRECISION_U16_LINEAR
			  LIGMA_PRECISION_U16_NON_LINEAR
			  LIGMA_PRECISION_U16_PERCEPTUAL
			  LIGMA_PRECISION_U32_LINEAR
			  LIGMA_PRECISION_U32_NON_LINEAR
			  LIGMA_PRECISION_U32_PERCEPTUAL
			  LIGMA_PRECISION_HALF_LINEAR
			  LIGMA_PRECISION_HALF_NON_LINEAR
			  LIGMA_PRECISION_HALF_PERCEPTUAL
			  LIGMA_PRECISION_FLOAT_LINEAR
			  LIGMA_PRECISION_FLOAT_NON_LINEAR
			  LIGMA_PRECISION_FLOAT_PERCEPTUAL
			  LIGMA_PRECISION_DOUBLE_LINEAR
			  LIGMA_PRECISION_DOUBLE_NON_LINEAR
			  LIGMA_PRECISION_DOUBLE_PERCEPTUAL
			  LIGMA_PRECISION_U8_GAMMA LIGMA_PRECISION_U16_GAMMA
			  LIGMA_PRECISION_U32_GAMMA LIGMA_PRECISION_HALF_GAMMA
			  LIGMA_PRECISION_FLOAT_GAMMA
			  LIGMA_PRECISION_DOUBLE_GAMMA) ],
	  mapping => { LIGMA_PRECISION_U8_LINEAR => '100',
		       LIGMA_PRECISION_U8_NON_LINEAR => '150',
		       LIGMA_PRECISION_U8_PERCEPTUAL => '175',
		       LIGMA_PRECISION_U16_LINEAR => '200',
		       LIGMA_PRECISION_U16_NON_LINEAR => '250',
		       LIGMA_PRECISION_U16_PERCEPTUAL => '275',
		       LIGMA_PRECISION_U32_LINEAR => '300',
		       LIGMA_PRECISION_U32_NON_LINEAR => '350',
		       LIGMA_PRECISION_U32_PERCEPTUAL => '375',
		       LIGMA_PRECISION_HALF_LINEAR => '500',
		       LIGMA_PRECISION_HALF_NON_LINEAR => '550',
		       LIGMA_PRECISION_HALF_PERCEPTUAL => '575',
		       LIGMA_PRECISION_FLOAT_LINEAR => '600',
		       LIGMA_PRECISION_FLOAT_NON_LINEAR => '650',
		       LIGMA_PRECISION_FLOAT_PERCEPTUAL => '675',
		       LIGMA_PRECISION_DOUBLE_LINEAR => '700',
		       LIGMA_PRECISION_DOUBLE_NON_LINEAR => '750',
		       LIGMA_PRECISION_DOUBLE_PERCEPTUAL => '775',
		       LIGMA_PRECISION_U8_GAMMA => 'LIGMA_PRECISION_U8_NON_LINEAR',
		       LIGMA_PRECISION_U16_GAMMA => 'LIGMA_PRECISION_U16_NON_LINEAR',
		       LIGMA_PRECISION_U32_GAMMA => 'LIGMA_PRECISION_U32_NON_LINEAR',
		       LIGMA_PRECISION_HALF_GAMMA => 'LIGMA_PRECISION_HALF_NON_LINEAR',
		       LIGMA_PRECISION_FLOAT_GAMMA => 'LIGMA_PRECISION_FLOAT_NON_LINEAR',
		       LIGMA_PRECISION_DOUBLE_GAMMA => 'LIGMA_PRECISION_DOUBLE_NON_LINEAR' }
	},
    LigmaProgressCommand =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_PROGRESS_COMMAND_START
			  LIGMA_PROGRESS_COMMAND_END
			  LIGMA_PROGRESS_COMMAND_SET_TEXT
			  LIGMA_PROGRESS_COMMAND_SET_VALUE
			  LIGMA_PROGRESS_COMMAND_PULSE
			  LIGMA_PROGRESS_COMMAND_GET_WINDOW) ],
	  mapping => { LIGMA_PROGRESS_COMMAND_START => '0',
		       LIGMA_PROGRESS_COMMAND_END => '1',
		       LIGMA_PROGRESS_COMMAND_SET_TEXT => '2',
		       LIGMA_PROGRESS_COMMAND_SET_VALUE => '3',
		       LIGMA_PROGRESS_COMMAND_PULSE => '4',
		       LIGMA_PROGRESS_COMMAND_GET_WINDOW => '5' }
	},
    LigmaRepeatMode =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_REPEAT_NONE LIGMA_REPEAT_SAWTOOTH
			  LIGMA_REPEAT_TRIANGULAR LIGMA_REPEAT_TRUNCATE) ],
	  mapping => { LIGMA_REPEAT_NONE => '0',
		       LIGMA_REPEAT_SAWTOOTH => '1',
		       LIGMA_REPEAT_TRIANGULAR => '2',
		       LIGMA_REPEAT_TRUNCATE => '3' }
	},
    LigmaRotationType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_ROTATE_90 LIGMA_ROTATE_180 LIGMA_ROTATE_270) ],
	  mapping => { LIGMA_ROTATE_90 => '0',
		       LIGMA_ROTATE_180 => '1',
		       LIGMA_ROTATE_270 => '2' }
	},
    LigmaRunMode =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_RUN_INTERACTIVE LIGMA_RUN_NONINTERACTIVE
			  LIGMA_RUN_WITH_LAST_VALS) ],
	  mapping => { LIGMA_RUN_INTERACTIVE => '0',
		       LIGMA_RUN_NONINTERACTIVE => '1',
		       LIGMA_RUN_WITH_LAST_VALS => '2' }
	},
    LigmaSelectCriterion =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_SELECT_CRITERION_COMPOSITE
			  LIGMA_SELECT_CRITERION_RGB_RED
			  LIGMA_SELECT_CRITERION_RGB_GREEN
			  LIGMA_SELECT_CRITERION_RGB_BLUE
			  LIGMA_SELECT_CRITERION_HSV_HUE
			  LIGMA_SELECT_CRITERION_HSV_SATURATION
			  LIGMA_SELECT_CRITERION_HSV_VALUE
			  LIGMA_SELECT_CRITERION_LCH_LIGHTNESS
			  LIGMA_SELECT_CRITERION_LCH_CHROMA
			  LIGMA_SELECT_CRITERION_LCH_HUE
			  LIGMA_SELECT_CRITERION_ALPHA) ],
	  mapping => { LIGMA_SELECT_CRITERION_COMPOSITE => '0',
		       LIGMA_SELECT_CRITERION_RGB_RED => '1',
		       LIGMA_SELECT_CRITERION_RGB_GREEN => '2',
		       LIGMA_SELECT_CRITERION_RGB_BLUE => '3',
		       LIGMA_SELECT_CRITERION_HSV_HUE => '4',
		       LIGMA_SELECT_CRITERION_HSV_SATURATION => '5',
		       LIGMA_SELECT_CRITERION_HSV_VALUE => '6',
		       LIGMA_SELECT_CRITERION_LCH_LIGHTNESS => '7',
		       LIGMA_SELECT_CRITERION_LCH_CHROMA => '8',
		       LIGMA_SELECT_CRITERION_LCH_HUE => '9',
		       LIGMA_SELECT_CRITERION_ALPHA => '10' }
	},
    LigmaSizeType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_PIXELS LIGMA_POINTS) ],
	  mapping => { LIGMA_PIXELS => '0',
		       LIGMA_POINTS => '1' }
	},
    LigmaStackTraceMode =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_STACK_TRACE_NEVER LIGMA_STACK_TRACE_QUERY
			  LIGMA_STACK_TRACE_ALWAYS) ],
	  mapping => { LIGMA_STACK_TRACE_NEVER => '0',
		       LIGMA_STACK_TRACE_QUERY => '1',
		       LIGMA_STACK_TRACE_ALWAYS => '2' }
	},
    LigmaStrokeMethod =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_STROKE_LINE LIGMA_STROKE_PAINT_METHOD) ],
	  mapping => { LIGMA_STROKE_LINE => '0',
		       LIGMA_STROKE_PAINT_METHOD => '1' }
	},
    LigmaTextDirection =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_TEXT_DIRECTION_LTR LIGMA_TEXT_DIRECTION_RTL
			  LIGMA_TEXT_DIRECTION_TTB_RTL
			  LIGMA_TEXT_DIRECTION_TTB_RTL_UPRIGHT
			  LIGMA_TEXT_DIRECTION_TTB_LTR
			  LIGMA_TEXT_DIRECTION_TTB_LTR_UPRIGHT) ],
	  mapping => { LIGMA_TEXT_DIRECTION_LTR => '0',
		       LIGMA_TEXT_DIRECTION_RTL => '1',
		       LIGMA_TEXT_DIRECTION_TTB_RTL => '2',
		       LIGMA_TEXT_DIRECTION_TTB_RTL_UPRIGHT => '3',
		       LIGMA_TEXT_DIRECTION_TTB_LTR => '4',
		       LIGMA_TEXT_DIRECTION_TTB_LTR_UPRIGHT => '5' }
	},
    LigmaTextHintStyle =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_TEXT_HINT_STYLE_NONE
			  LIGMA_TEXT_HINT_STYLE_SLIGHT
			  LIGMA_TEXT_HINT_STYLE_MEDIUM
			  LIGMA_TEXT_HINT_STYLE_FULL) ],
	  mapping => { LIGMA_TEXT_HINT_STYLE_NONE => '0',
		       LIGMA_TEXT_HINT_STYLE_SLIGHT => '1',
		       LIGMA_TEXT_HINT_STYLE_MEDIUM => '2',
		       LIGMA_TEXT_HINT_STYLE_FULL => '3' }
	},
    LigmaTextJustification =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_TEXT_JUSTIFY_LEFT LIGMA_TEXT_JUSTIFY_RIGHT
			  LIGMA_TEXT_JUSTIFY_CENTER LIGMA_TEXT_JUSTIFY_FILL) ],
	  mapping => { LIGMA_TEXT_JUSTIFY_LEFT => '0',
		       LIGMA_TEXT_JUSTIFY_RIGHT => '1',
		       LIGMA_TEXT_JUSTIFY_CENTER => '2',
		       LIGMA_TEXT_JUSTIFY_FILL => '3' }
	},
    LigmaTransferMode =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_TRANSFER_SHADOWS LIGMA_TRANSFER_MIDTONES
			  LIGMA_TRANSFER_HIGHLIGHTS) ],
	  mapping => { LIGMA_TRANSFER_SHADOWS => '0',
		       LIGMA_TRANSFER_MIDTONES => '1',
		       LIGMA_TRANSFER_HIGHLIGHTS => '2' }
	},
    LigmaTransformDirection =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_TRANSFORM_FORWARD LIGMA_TRANSFORM_BACKWARD) ],
	  mapping => { LIGMA_TRANSFORM_FORWARD => '0',
		       LIGMA_TRANSFORM_BACKWARD => '1' }
	},
    LigmaTransformResize =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_TRANSFORM_RESIZE_ADJUST
			  LIGMA_TRANSFORM_RESIZE_CLIP
			  LIGMA_TRANSFORM_RESIZE_CROP
			  LIGMA_TRANSFORM_RESIZE_CROP_WITH_ASPECT) ],
	  mapping => { LIGMA_TRANSFORM_RESIZE_ADJUST => '0',
		       LIGMA_TRANSFORM_RESIZE_CLIP => '1',
		       LIGMA_TRANSFORM_RESIZE_CROP => '2',
		       LIGMA_TRANSFORM_RESIZE_CROP_WITH_ASPECT => '3' }
	},
    LigmaUnit =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_UNIT_PIXEL LIGMA_UNIT_INCH LIGMA_UNIT_MM
			  LIGMA_UNIT_POINT LIGMA_UNIT_PICA LIGMA_UNIT_END) ],
	  mapping => { LIGMA_UNIT_PIXEL => '0',
		       LIGMA_UNIT_INCH => '1',
		       LIGMA_UNIT_MM => '2',
		       LIGMA_UNIT_POINT => '3',
		       LIGMA_UNIT_PICA => '4',
		       LIGMA_UNIT_END => '5' }
	},
    LigmaVectorsStrokeType =>
	{ contig => 1,
	  header => 'libligmabase/ligmabaseenums.h',
	  symbols => [ qw(LIGMA_VECTORS_STROKE_TYPE_BEZIER) ],
	  mapping => { LIGMA_VECTORS_STROKE_TYPE_BEZIER => '0' }
	},
    LigmaColorManagementMode =>
	{ contig => 1,
	  header => 'libligmaconfig/ligmaconfigenums.h',
	  symbols => [ qw(LIGMA_COLOR_MANAGEMENT_OFF
			  LIGMA_COLOR_MANAGEMENT_DISPLAY
			  LIGMA_COLOR_MANAGEMENT_SOFTPROOF) ],
	  mapping => { LIGMA_COLOR_MANAGEMENT_OFF => '0',
		       LIGMA_COLOR_MANAGEMENT_DISPLAY => '1',
		       LIGMA_COLOR_MANAGEMENT_SOFTPROOF => '2' }
	},
    LigmaColorRenderingIntent =>
	{ contig => 1,
	  header => 'libligmaconfig/ligmaconfigenums.h',
	  symbols => [ qw(LIGMA_COLOR_RENDERING_INTENT_PERCEPTUAL
			  LIGMA_COLOR_RENDERING_INTENT_RELATIVE_COLORIMETRIC
			  LIGMA_COLOR_RENDERING_INTENT_SATURATION
			  LIGMA_COLOR_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC) ],
	  mapping => { LIGMA_COLOR_RENDERING_INTENT_PERCEPTUAL => '0',
		       LIGMA_COLOR_RENDERING_INTENT_RELATIVE_COLORIMETRIC => '1',
		       LIGMA_COLOR_RENDERING_INTENT_SATURATION => '2',
		       LIGMA_COLOR_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC => '3' }
	},
    LigmaLayerColorSpace =>
	{ contig => 1,
	  header => 'operations/operations-enums.h',
	  symbols => [ qw(LIGMA_LAYER_COLOR_SPACE_AUTO
			  LIGMA_LAYER_COLOR_SPACE_RGB_LINEAR
			  LIGMA_LAYER_COLOR_SPACE_RGB_PERCEPTUAL) ],
	  mapping => { LIGMA_LAYER_COLOR_SPACE_AUTO => '0',
		       LIGMA_LAYER_COLOR_SPACE_RGB_LINEAR => '1',
		       LIGMA_LAYER_COLOR_SPACE_RGB_PERCEPTUAL => '2' }
	},
    LigmaLayerCompositeMode =>
	{ contig => 1,
	  header => 'operations/operations-enums.h',
	  symbols => [ qw(LIGMA_LAYER_COMPOSITE_AUTO
			  LIGMA_LAYER_COMPOSITE_UNION
			  LIGMA_LAYER_COMPOSITE_CLIP_TO_BACKDROP
			  LIGMA_LAYER_COMPOSITE_CLIP_TO_LAYER
			  LIGMA_LAYER_COMPOSITE_INTERSECTION) ],
	  mapping => { LIGMA_LAYER_COMPOSITE_AUTO => '0',
		       LIGMA_LAYER_COMPOSITE_UNION => '1',
		       LIGMA_LAYER_COMPOSITE_CLIP_TO_BACKDROP => '2',
		       LIGMA_LAYER_COMPOSITE_CLIP_TO_LAYER => '3',
		       LIGMA_LAYER_COMPOSITE_INTERSECTION => '4' }
	},
    LigmaLayerMode =>
	{ contig => 1,
	  header => 'operations/operations-enums.h',
	  symbols => [ qw(LIGMA_LAYER_MODE_NORMAL_LEGACY
			  LIGMA_LAYER_MODE_DISSOLVE
			  LIGMA_LAYER_MODE_BEHIND_LEGACY
			  LIGMA_LAYER_MODE_MULTIPLY_LEGACY
			  LIGMA_LAYER_MODE_SCREEN_LEGACY
			  LIGMA_LAYER_MODE_OVERLAY_LEGACY
			  LIGMA_LAYER_MODE_DIFFERENCE_LEGACY
			  LIGMA_LAYER_MODE_ADDITION_LEGACY
			  LIGMA_LAYER_MODE_SUBTRACT_LEGACY
			  LIGMA_LAYER_MODE_DARKEN_ONLY_LEGACY
			  LIGMA_LAYER_MODE_LIGHTEN_ONLY_LEGACY
			  LIGMA_LAYER_MODE_HSV_HUE_LEGACY
			  LIGMA_LAYER_MODE_HSV_SATURATION_LEGACY
			  LIGMA_LAYER_MODE_HSL_COLOR_LEGACY
			  LIGMA_LAYER_MODE_HSV_VALUE_LEGACY
			  LIGMA_LAYER_MODE_DIVIDE_LEGACY
			  LIGMA_LAYER_MODE_DODGE_LEGACY
			  LIGMA_LAYER_MODE_BURN_LEGACY
			  LIGMA_LAYER_MODE_HARDLIGHT_LEGACY
			  LIGMA_LAYER_MODE_SOFTLIGHT_LEGACY
			  LIGMA_LAYER_MODE_GRAIN_EXTRACT_LEGACY
			  LIGMA_LAYER_MODE_GRAIN_MERGE_LEGACY
			  LIGMA_LAYER_MODE_COLOR_ERASE_LEGACY
			  LIGMA_LAYER_MODE_OVERLAY LIGMA_LAYER_MODE_LCH_HUE
			  LIGMA_LAYER_MODE_LCH_CHROMA
			  LIGMA_LAYER_MODE_LCH_COLOR
			  LIGMA_LAYER_MODE_LCH_LIGHTNESS
			  LIGMA_LAYER_MODE_NORMAL LIGMA_LAYER_MODE_BEHIND
			  LIGMA_LAYER_MODE_MULTIPLY LIGMA_LAYER_MODE_SCREEN
			  LIGMA_LAYER_MODE_DIFFERENCE
			  LIGMA_LAYER_MODE_ADDITION LIGMA_LAYER_MODE_SUBTRACT
			  LIGMA_LAYER_MODE_DARKEN_ONLY
			  LIGMA_LAYER_MODE_LIGHTEN_ONLY
			  LIGMA_LAYER_MODE_HSV_HUE
			  LIGMA_LAYER_MODE_HSV_SATURATION
			  LIGMA_LAYER_MODE_HSL_COLOR
			  LIGMA_LAYER_MODE_HSV_VALUE LIGMA_LAYER_MODE_DIVIDE
			  LIGMA_LAYER_MODE_DODGE LIGMA_LAYER_MODE_BURN
			  LIGMA_LAYER_MODE_HARDLIGHT
			  LIGMA_LAYER_MODE_SOFTLIGHT
			  LIGMA_LAYER_MODE_GRAIN_EXTRACT
			  LIGMA_LAYER_MODE_GRAIN_MERGE
			  LIGMA_LAYER_MODE_VIVID_LIGHT
			  LIGMA_LAYER_MODE_PIN_LIGHT
			  LIGMA_LAYER_MODE_LINEAR_LIGHT
			  LIGMA_LAYER_MODE_HARD_MIX LIGMA_LAYER_MODE_EXCLUSION
			  LIGMA_LAYER_MODE_LINEAR_BURN
			  LIGMA_LAYER_MODE_LUMA_DARKEN_ONLY
			  LIGMA_LAYER_MODE_LUMA_LIGHTEN_ONLY
			  LIGMA_LAYER_MODE_LUMINANCE
			  LIGMA_LAYER_MODE_COLOR_ERASE LIGMA_LAYER_MODE_ERASE
			  LIGMA_LAYER_MODE_MERGE LIGMA_LAYER_MODE_SPLIT
			  LIGMA_LAYER_MODE_PASS_THROUGH) ],
	  mapping => { LIGMA_LAYER_MODE_NORMAL_LEGACY => '0',
		       LIGMA_LAYER_MODE_DISSOLVE => '1',
		       LIGMA_LAYER_MODE_BEHIND_LEGACY => '2',
		       LIGMA_LAYER_MODE_MULTIPLY_LEGACY => '3',
		       LIGMA_LAYER_MODE_SCREEN_LEGACY => '4',
		       LIGMA_LAYER_MODE_OVERLAY_LEGACY => '5',
		       LIGMA_LAYER_MODE_DIFFERENCE_LEGACY => '6',
		       LIGMA_LAYER_MODE_ADDITION_LEGACY => '7',
		       LIGMA_LAYER_MODE_SUBTRACT_LEGACY => '8',
		       LIGMA_LAYER_MODE_DARKEN_ONLY_LEGACY => '9',
		       LIGMA_LAYER_MODE_LIGHTEN_ONLY_LEGACY => '10',
		       LIGMA_LAYER_MODE_HSV_HUE_LEGACY => '11',
		       LIGMA_LAYER_MODE_HSV_SATURATION_LEGACY => '12',
		       LIGMA_LAYER_MODE_HSL_COLOR_LEGACY => '13',
		       LIGMA_LAYER_MODE_HSV_VALUE_LEGACY => '14',
		       LIGMA_LAYER_MODE_DIVIDE_LEGACY => '15',
		       LIGMA_LAYER_MODE_DODGE_LEGACY => '16',
		       LIGMA_LAYER_MODE_BURN_LEGACY => '17',
		       LIGMA_LAYER_MODE_HARDLIGHT_LEGACY => '18',
		       LIGMA_LAYER_MODE_SOFTLIGHT_LEGACY => '19',
		       LIGMA_LAYER_MODE_GRAIN_EXTRACT_LEGACY => '20',
		       LIGMA_LAYER_MODE_GRAIN_MERGE_LEGACY => '21',
		       LIGMA_LAYER_MODE_COLOR_ERASE_LEGACY => '22',
		       LIGMA_LAYER_MODE_OVERLAY => '23',
		       LIGMA_LAYER_MODE_LCH_HUE => '24',
		       LIGMA_LAYER_MODE_LCH_CHROMA => '25',
		       LIGMA_LAYER_MODE_LCH_COLOR => '26',
		       LIGMA_LAYER_MODE_LCH_LIGHTNESS => '27',
		       LIGMA_LAYER_MODE_NORMAL => '28',
		       LIGMA_LAYER_MODE_BEHIND => '29',
		       LIGMA_LAYER_MODE_MULTIPLY => '30',
		       LIGMA_LAYER_MODE_SCREEN => '31',
		       LIGMA_LAYER_MODE_DIFFERENCE => '32',
		       LIGMA_LAYER_MODE_ADDITION => '33',
		       LIGMA_LAYER_MODE_SUBTRACT => '34',
		       LIGMA_LAYER_MODE_DARKEN_ONLY => '35',
		       LIGMA_LAYER_MODE_LIGHTEN_ONLY => '36',
		       LIGMA_LAYER_MODE_HSV_HUE => '37',
		       LIGMA_LAYER_MODE_HSV_SATURATION => '38',
		       LIGMA_LAYER_MODE_HSL_COLOR => '39',
		       LIGMA_LAYER_MODE_HSV_VALUE => '40',
		       LIGMA_LAYER_MODE_DIVIDE => '41',
		       LIGMA_LAYER_MODE_DODGE => '42',
		       LIGMA_LAYER_MODE_BURN => '43',
		       LIGMA_LAYER_MODE_HARDLIGHT => '44',
		       LIGMA_LAYER_MODE_SOFTLIGHT => '45',
		       LIGMA_LAYER_MODE_GRAIN_EXTRACT => '46',
		       LIGMA_LAYER_MODE_GRAIN_MERGE => '47',
		       LIGMA_LAYER_MODE_VIVID_LIGHT => '48',
		       LIGMA_LAYER_MODE_PIN_LIGHT => '49',
		       LIGMA_LAYER_MODE_LINEAR_LIGHT => '50',
		       LIGMA_LAYER_MODE_HARD_MIX => '51',
		       LIGMA_LAYER_MODE_EXCLUSION => '52',
		       LIGMA_LAYER_MODE_LINEAR_BURN => '53',
		       LIGMA_LAYER_MODE_LUMA_DARKEN_ONLY => '54',
		       LIGMA_LAYER_MODE_LUMA_LIGHTEN_ONLY => '55',
		       LIGMA_LAYER_MODE_LUMINANCE => '56',
		       LIGMA_LAYER_MODE_COLOR_ERASE => '57',
		       LIGMA_LAYER_MODE_ERASE => '58',
		       LIGMA_LAYER_MODE_MERGE => '59',
		       LIGMA_LAYER_MODE_SPLIT => '60',
		       LIGMA_LAYER_MODE_PASS_THROUGH => '61' }
	},
    LigmaConvertDitherType =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(LIGMA_CONVERT_DITHER_NONE LIGMA_CONVERT_DITHER_FS
			  LIGMA_CONVERT_DITHER_FS_LOWBLEED
			  LIGMA_CONVERT_DITHER_FIXED) ],
	  mapping => { LIGMA_CONVERT_DITHER_NONE => '0',
		       LIGMA_CONVERT_DITHER_FS => '1',
		       LIGMA_CONVERT_DITHER_FS_LOWBLEED => '2',
		       LIGMA_CONVERT_DITHER_FIXED => '3' }
	},
    LigmaHistogramChannel =>
	{ contig => 1,
	  header => 'core/core-enums.h',
	  symbols => [ qw(LIGMA_HISTOGRAM_VALUE LIGMA_HISTOGRAM_RED
			  LIGMA_HISTOGRAM_GREEN LIGMA_HISTOGRAM_BLUE
			  LIGMA_HISTOGRAM_ALPHA LIGMA_HISTOGRAM_LUMINANCE) ],
	  mapping => { LIGMA_HISTOGRAM_VALUE => '0',
		       LIGMA_HISTOGRAM_RED => '1',
		       LIGMA_HISTOGRAM_GREEN => '2',
		       LIGMA_HISTOGRAM_BLUE => '3',
		       LIGMA_HISTOGRAM_ALPHA => '4',
		       LIGMA_HISTOGRAM_LUMINANCE => '5' }
	},
    LigmaBrushApplicationMode =>
	{ contig => 1,
	  header => 'paint/paint-enums.h',
	  symbols => [ qw(LIGMA_BRUSH_HARD LIGMA_BRUSH_SOFT) ],
	  mapping => { LIGMA_BRUSH_HARD => '0',
		       LIGMA_BRUSH_SOFT => '1' }
	}
);

foreach $e (values %enums) {
    $e->{info} = "";
    foreach (@{$e->{symbols}}) {
	$e->{info} .= "$_ ($e->{mapping}->{$_}), "
    }
    $e->{info} =~ s/, $//;
}

1;
