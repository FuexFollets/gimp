/* LIBLIGMA - The LIGMA Library
 * Copyright (C) 1995-2003 Peter Mattis and Spencer Kimball
 *
 * ligmalayer_pdb.h
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see
 * <https://www.gnu.org/licenses/>.
 */

/* NOTE: This file is auto-generated by pdbgen.pl */

#if !defined (__LIGMA_H_INSIDE__) && !defined (LIGMA_COMPILATION)
#error "Only <libligma/ligma.h> can be included directly."
#endif

#ifndef __LIGMA_LAYER_PDB_H__
#define __LIGMA_LAYER_PDB_H__

G_BEGIN_DECLS

/* For information look into the C source or the html documentation */


G_GNUC_INTERNAL LigmaLayer* _ligma_layer_new                 (LigmaImage              *image,
                                                            gint                    width,
                                                            gint                    height,
                                                            LigmaImageType           type,
                                                            const gchar            *name,
                                                            gdouble                 opacity,
                                                            LigmaLayerMode           mode);
LigmaLayer*                 ligma_layer_new_from_visible     (LigmaImage              *image,
                                                            LigmaImage              *dest_image,
                                                            const gchar            *name);
LigmaLayer*                 ligma_layer_new_from_drawable    (LigmaDrawable           *drawable,
                                                            LigmaImage              *dest_image);
LigmaLayer*                 ligma_layer_group_new            (LigmaImage              *image);
G_GNUC_INTERNAL LigmaLayer* _ligma_layer_copy                (LigmaLayer              *layer,
                                                            gboolean                add_alpha);
gboolean                   ligma_layer_add_alpha            (LigmaLayer              *layer);
gboolean                   ligma_layer_flatten              (LigmaLayer              *layer);
gboolean                   ligma_layer_scale                (LigmaLayer              *layer,
                                                            gint                    new_width,
                                                            gint                    new_height,
                                                            gboolean                local_origin);
gboolean                   ligma_layer_resize               (LigmaLayer              *layer,
                                                            gint                    new_width,
                                                            gint                    new_height,
                                                            gint                    offx,
                                                            gint                    offy);
gboolean                   ligma_layer_resize_to_image_size (LigmaLayer              *layer);
gboolean                   ligma_layer_set_offsets          (LigmaLayer              *layer,
                                                            gint                    offx,
                                                            gint                    offy);
LigmaLayerMask*             ligma_layer_create_mask          (LigmaLayer              *layer,
                                                            LigmaAddMaskType         mask_type);
LigmaLayerMask*             ligma_layer_get_mask             (LigmaLayer              *layer);
LigmaLayer*                 ligma_layer_from_mask            (LigmaLayerMask          *mask);
gboolean                   ligma_layer_add_mask             (LigmaLayer              *layer,
                                                            LigmaLayerMask          *mask);
gboolean                   ligma_layer_remove_mask          (LigmaLayer              *layer,
                                                            LigmaMaskApplyMode       mode);
gboolean                   ligma_layer_is_floating_sel      (LigmaLayer              *layer);
gboolean                   ligma_layer_get_lock_alpha       (LigmaLayer              *layer);
gboolean                   ligma_layer_set_lock_alpha       (LigmaLayer              *layer,
                                                            gboolean                lock_alpha);
gboolean                   ligma_layer_get_apply_mask       (LigmaLayer              *layer);
gboolean                   ligma_layer_set_apply_mask       (LigmaLayer              *layer,
                                                            gboolean                apply_mask);
gboolean                   ligma_layer_get_show_mask        (LigmaLayer              *layer);
gboolean                   ligma_layer_set_show_mask        (LigmaLayer              *layer,
                                                            gboolean                show_mask);
gboolean                   ligma_layer_get_edit_mask        (LigmaLayer              *layer);
gboolean                   ligma_layer_set_edit_mask        (LigmaLayer              *layer,
                                                            gboolean                edit_mask);
gdouble                    ligma_layer_get_opacity          (LigmaLayer              *layer);
gboolean                   ligma_layer_set_opacity          (LigmaLayer              *layer,
                                                            gdouble                 opacity);
LigmaLayerMode              ligma_layer_get_mode             (LigmaLayer              *layer);
gboolean                   ligma_layer_set_mode             (LigmaLayer              *layer,
                                                            LigmaLayerMode           mode);
LigmaLayerColorSpace        ligma_layer_get_blend_space      (LigmaLayer              *layer);
gboolean                   ligma_layer_set_blend_space      (LigmaLayer              *layer,
                                                            LigmaLayerColorSpace     blend_space);
LigmaLayerColorSpace        ligma_layer_get_composite_space  (LigmaLayer              *layer);
gboolean                   ligma_layer_set_composite_space  (LigmaLayer              *layer,
                                                            LigmaLayerColorSpace     composite_space);
LigmaLayerCompositeMode     ligma_layer_get_composite_mode   (LigmaLayer              *layer);
gboolean                   ligma_layer_set_composite_mode   (LigmaLayer              *layer,
                                                            LigmaLayerCompositeMode  composite_mode);


G_END_DECLS

#endif /* __LIGMA_LAYER_PDB_H__ */
