/* LIBLIGMA - The LIGMA Library
 * Copyright (C) 1995-2003 Peter Mattis and Spencer Kimball
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see
 * <https://www.gnu.org/licenses/>.
 */

/* NOTE: This file is autogenerated by enumcode.pl */

#ifndef __LIGMA_ENUMS_H__
#define __LIGMA_ENUMS_H__

G_BEGIN_DECLS


#define LIGMA_TYPE_BRUSH_APPLICATION_MODE (ligma_brush_application_mode_get_type ())

GType ligma_brush_application_mode_get_type (void) G_GNUC_CONST;

/**
 * LigmaBrushApplicationMode:
 * @LIGMA_BRUSH_HARD: LIGMA_BRUSH_HARD
 * @LIGMA_BRUSH_SOFT: LIGMA_BRUSH_SOFT
 *
 * Extracted from app/paint/paint-enums.h
 **/
typedef enum
{
  LIGMA_BRUSH_HARD,
  LIGMA_BRUSH_SOFT
} LigmaBrushApplicationMode;


#define LIGMA_TYPE_CONVERT_DITHER_TYPE (ligma_convert_dither_type_get_type ())

GType ligma_convert_dither_type_get_type (void) G_GNUC_CONST;

/**
 * LigmaConvertDitherType:
 * @LIGMA_CONVERT_DITHER_NONE: LIGMA_CONVERT_DITHER_NONE
 * @LIGMA_CONVERT_DITHER_FS: LIGMA_CONVERT_DITHER_FS
 * @LIGMA_CONVERT_DITHER_FS_LOWBLEED: LIGMA_CONVERT_DITHER_FS_LOWBLEED
 * @LIGMA_CONVERT_DITHER_FIXED: LIGMA_CONVERT_DITHER_FIXED
 *
 * Extracted from app/core/core-enums.h
 **/
typedef enum
{
  LIGMA_CONVERT_DITHER_NONE,
  LIGMA_CONVERT_DITHER_FS,
  LIGMA_CONVERT_DITHER_FS_LOWBLEED,
  LIGMA_CONVERT_DITHER_FIXED
} LigmaConvertDitherType;


#define LIGMA_TYPE_HISTOGRAM_CHANNEL (ligma_histogram_channel_get_type ())

GType ligma_histogram_channel_get_type (void) G_GNUC_CONST;

/**
 * LigmaHistogramChannel:
 * @LIGMA_HISTOGRAM_VALUE: LIGMA_HISTOGRAM_VALUE
 * @LIGMA_HISTOGRAM_RED: LIGMA_HISTOGRAM_RED
 * @LIGMA_HISTOGRAM_GREEN: LIGMA_HISTOGRAM_GREEN
 * @LIGMA_HISTOGRAM_BLUE: LIGMA_HISTOGRAM_BLUE
 * @LIGMA_HISTOGRAM_ALPHA: LIGMA_HISTOGRAM_ALPHA
 * @LIGMA_HISTOGRAM_LUMINANCE: LIGMA_HISTOGRAM_LUMINANCE
 *
 * Extracted from app/core/core-enums.h
 **/
typedef enum
{
  LIGMA_HISTOGRAM_VALUE,
  LIGMA_HISTOGRAM_RED,
  LIGMA_HISTOGRAM_GREEN,
  LIGMA_HISTOGRAM_BLUE,
  LIGMA_HISTOGRAM_ALPHA,
  LIGMA_HISTOGRAM_LUMINANCE
} LigmaHistogramChannel;


#define LIGMA_TYPE_LAYER_COLOR_SPACE (ligma_layer_color_space_get_type ())

GType ligma_layer_color_space_get_type (void) G_GNUC_CONST;

/**
 * LigmaLayerColorSpace:
 * @LIGMA_LAYER_COLOR_SPACE_AUTO: LIGMA_LAYER_COLOR_SPACE_AUTO
 * @LIGMA_LAYER_COLOR_SPACE_RGB_LINEAR: LIGMA_LAYER_COLOR_SPACE_RGB_LINEAR
 * @LIGMA_LAYER_COLOR_SPACE_RGB_PERCEPTUAL: LIGMA_LAYER_COLOR_SPACE_RGB_PERCEPTUAL
 *
 * Extracted from app/operations/operations-enums.h
 **/
typedef enum
{
  LIGMA_LAYER_COLOR_SPACE_AUTO,
  LIGMA_LAYER_COLOR_SPACE_RGB_LINEAR,
  LIGMA_LAYER_COLOR_SPACE_RGB_PERCEPTUAL
} LigmaLayerColorSpace;


#define LIGMA_TYPE_LAYER_COMPOSITE_MODE (ligma_layer_composite_mode_get_type ())

GType ligma_layer_composite_mode_get_type (void) G_GNUC_CONST;

/**
 * LigmaLayerCompositeMode:
 * @LIGMA_LAYER_COMPOSITE_AUTO: LIGMA_LAYER_COMPOSITE_AUTO
 * @LIGMA_LAYER_COMPOSITE_UNION: LIGMA_LAYER_COMPOSITE_UNION
 * @LIGMA_LAYER_COMPOSITE_CLIP_TO_BACKDROP: LIGMA_LAYER_COMPOSITE_CLIP_TO_BACKDROP
 * @LIGMA_LAYER_COMPOSITE_CLIP_TO_LAYER: LIGMA_LAYER_COMPOSITE_CLIP_TO_LAYER
 * @LIGMA_LAYER_COMPOSITE_INTERSECTION: LIGMA_LAYER_COMPOSITE_INTERSECTION
 *
 * Extracted from app/operations/operations-enums.h
 **/
typedef enum
{
  LIGMA_LAYER_COMPOSITE_AUTO,
  LIGMA_LAYER_COMPOSITE_UNION,
  LIGMA_LAYER_COMPOSITE_CLIP_TO_BACKDROP,
  LIGMA_LAYER_COMPOSITE_CLIP_TO_LAYER,
  LIGMA_LAYER_COMPOSITE_INTERSECTION
} LigmaLayerCompositeMode;


#define LIGMA_TYPE_LAYER_MODE (ligma_layer_mode_get_type ())

GType ligma_layer_mode_get_type (void) G_GNUC_CONST;

/**
 * LigmaLayerMode:
 * @LIGMA_LAYER_MODE_NORMAL_LEGACY: LIGMA_LAYER_MODE_NORMAL_LEGACY
 * @LIGMA_LAYER_MODE_DISSOLVE: LIGMA_LAYER_MODE_DISSOLVE
 * @LIGMA_LAYER_MODE_BEHIND_LEGACY: LIGMA_LAYER_MODE_BEHIND_LEGACY
 * @LIGMA_LAYER_MODE_MULTIPLY_LEGACY: LIGMA_LAYER_MODE_MULTIPLY_LEGACY
 * @LIGMA_LAYER_MODE_SCREEN_LEGACY: LIGMA_LAYER_MODE_SCREEN_LEGACY
 * @LIGMA_LAYER_MODE_OVERLAY_LEGACY: LIGMA_LAYER_MODE_OVERLAY_LEGACY
 * @LIGMA_LAYER_MODE_DIFFERENCE_LEGACY: LIGMA_LAYER_MODE_DIFFERENCE_LEGACY
 * @LIGMA_LAYER_MODE_ADDITION_LEGACY: LIGMA_LAYER_MODE_ADDITION_LEGACY
 * @LIGMA_LAYER_MODE_SUBTRACT_LEGACY: LIGMA_LAYER_MODE_SUBTRACT_LEGACY
 * @LIGMA_LAYER_MODE_DARKEN_ONLY_LEGACY: LIGMA_LAYER_MODE_DARKEN_ONLY_LEGACY
 * @LIGMA_LAYER_MODE_LIGHTEN_ONLY_LEGACY: LIGMA_LAYER_MODE_LIGHTEN_ONLY_LEGACY
 * @LIGMA_LAYER_MODE_HSV_HUE_LEGACY: LIGMA_LAYER_MODE_HSV_HUE_LEGACY
 * @LIGMA_LAYER_MODE_HSV_SATURATION_LEGACY: LIGMA_LAYER_MODE_HSV_SATURATION_LEGACY
 * @LIGMA_LAYER_MODE_HSL_COLOR_LEGACY: LIGMA_LAYER_MODE_HSL_COLOR_LEGACY
 * @LIGMA_LAYER_MODE_HSV_VALUE_LEGACY: LIGMA_LAYER_MODE_HSV_VALUE_LEGACY
 * @LIGMA_LAYER_MODE_DIVIDE_LEGACY: LIGMA_LAYER_MODE_DIVIDE_LEGACY
 * @LIGMA_LAYER_MODE_DODGE_LEGACY: LIGMA_LAYER_MODE_DODGE_LEGACY
 * @LIGMA_LAYER_MODE_BURN_LEGACY: LIGMA_LAYER_MODE_BURN_LEGACY
 * @LIGMA_LAYER_MODE_HARDLIGHT_LEGACY: LIGMA_LAYER_MODE_HARDLIGHT_LEGACY
 * @LIGMA_LAYER_MODE_SOFTLIGHT_LEGACY: LIGMA_LAYER_MODE_SOFTLIGHT_LEGACY
 * @LIGMA_LAYER_MODE_GRAIN_EXTRACT_LEGACY: LIGMA_LAYER_MODE_GRAIN_EXTRACT_LEGACY
 * @LIGMA_LAYER_MODE_GRAIN_MERGE_LEGACY: LIGMA_LAYER_MODE_GRAIN_MERGE_LEGACY
 * @LIGMA_LAYER_MODE_COLOR_ERASE_LEGACY: LIGMA_LAYER_MODE_COLOR_ERASE_LEGACY
 * @LIGMA_LAYER_MODE_OVERLAY: LIGMA_LAYER_MODE_OVERLAY
 * @LIGMA_LAYER_MODE_LCH_HUE: LIGMA_LAYER_MODE_LCH_HUE
 * @LIGMA_LAYER_MODE_LCH_CHROMA: LIGMA_LAYER_MODE_LCH_CHROMA
 * @LIGMA_LAYER_MODE_LCH_COLOR: LIGMA_LAYER_MODE_LCH_COLOR
 * @LIGMA_LAYER_MODE_LCH_LIGHTNESS: LIGMA_LAYER_MODE_LCH_LIGHTNESS
 * @LIGMA_LAYER_MODE_NORMAL: LIGMA_LAYER_MODE_NORMAL
 * @LIGMA_LAYER_MODE_BEHIND: LIGMA_LAYER_MODE_BEHIND
 * @LIGMA_LAYER_MODE_MULTIPLY: LIGMA_LAYER_MODE_MULTIPLY
 * @LIGMA_LAYER_MODE_SCREEN: LIGMA_LAYER_MODE_SCREEN
 * @LIGMA_LAYER_MODE_DIFFERENCE: LIGMA_LAYER_MODE_DIFFERENCE
 * @LIGMA_LAYER_MODE_ADDITION: LIGMA_LAYER_MODE_ADDITION
 * @LIGMA_LAYER_MODE_SUBTRACT: LIGMA_LAYER_MODE_SUBTRACT
 * @LIGMA_LAYER_MODE_DARKEN_ONLY: LIGMA_LAYER_MODE_DARKEN_ONLY
 * @LIGMA_LAYER_MODE_LIGHTEN_ONLY: LIGMA_LAYER_MODE_LIGHTEN_ONLY
 * @LIGMA_LAYER_MODE_HSV_HUE: LIGMA_LAYER_MODE_HSV_HUE
 * @LIGMA_LAYER_MODE_HSV_SATURATION: LIGMA_LAYER_MODE_HSV_SATURATION
 * @LIGMA_LAYER_MODE_HSL_COLOR: LIGMA_LAYER_MODE_HSL_COLOR
 * @LIGMA_LAYER_MODE_HSV_VALUE: LIGMA_LAYER_MODE_HSV_VALUE
 * @LIGMA_LAYER_MODE_DIVIDE: LIGMA_LAYER_MODE_DIVIDE
 * @LIGMA_LAYER_MODE_DODGE: LIGMA_LAYER_MODE_DODGE
 * @LIGMA_LAYER_MODE_BURN: LIGMA_LAYER_MODE_BURN
 * @LIGMA_LAYER_MODE_HARDLIGHT: LIGMA_LAYER_MODE_HARDLIGHT
 * @LIGMA_LAYER_MODE_SOFTLIGHT: LIGMA_LAYER_MODE_SOFTLIGHT
 * @LIGMA_LAYER_MODE_GRAIN_EXTRACT: LIGMA_LAYER_MODE_GRAIN_EXTRACT
 * @LIGMA_LAYER_MODE_GRAIN_MERGE: LIGMA_LAYER_MODE_GRAIN_MERGE
 * @LIGMA_LAYER_MODE_VIVID_LIGHT: LIGMA_LAYER_MODE_VIVID_LIGHT
 * @LIGMA_LAYER_MODE_PIN_LIGHT: LIGMA_LAYER_MODE_PIN_LIGHT
 * @LIGMA_LAYER_MODE_LINEAR_LIGHT: LIGMA_LAYER_MODE_LINEAR_LIGHT
 * @LIGMA_LAYER_MODE_HARD_MIX: LIGMA_LAYER_MODE_HARD_MIX
 * @LIGMA_LAYER_MODE_EXCLUSION: LIGMA_LAYER_MODE_EXCLUSION
 * @LIGMA_LAYER_MODE_LINEAR_BURN: LIGMA_LAYER_MODE_LINEAR_BURN
 * @LIGMA_LAYER_MODE_LUMA_DARKEN_ONLY: LIGMA_LAYER_MODE_LUMA_DARKEN_ONLY
 * @LIGMA_LAYER_MODE_LUMA_LIGHTEN_ONLY: LIGMA_LAYER_MODE_LUMA_LIGHTEN_ONLY
 * @LIGMA_LAYER_MODE_LUMINANCE: LIGMA_LAYER_MODE_LUMINANCE
 * @LIGMA_LAYER_MODE_COLOR_ERASE: LIGMA_LAYER_MODE_COLOR_ERASE
 * @LIGMA_LAYER_MODE_ERASE: LIGMA_LAYER_MODE_ERASE
 * @LIGMA_LAYER_MODE_MERGE: LIGMA_LAYER_MODE_MERGE
 * @LIGMA_LAYER_MODE_SPLIT: LIGMA_LAYER_MODE_SPLIT
 * @LIGMA_LAYER_MODE_PASS_THROUGH: LIGMA_LAYER_MODE_PASS_THROUGH
 *
 * Extracted from app/operations/operations-enums.h
 **/
typedef enum
{
  LIGMA_LAYER_MODE_NORMAL_LEGACY,
  LIGMA_LAYER_MODE_DISSOLVE,
  LIGMA_LAYER_MODE_BEHIND_LEGACY,
  LIGMA_LAYER_MODE_MULTIPLY_LEGACY,
  LIGMA_LAYER_MODE_SCREEN_LEGACY,
  LIGMA_LAYER_MODE_OVERLAY_LEGACY,
  LIGMA_LAYER_MODE_DIFFERENCE_LEGACY,
  LIGMA_LAYER_MODE_ADDITION_LEGACY,
  LIGMA_LAYER_MODE_SUBTRACT_LEGACY,
  LIGMA_LAYER_MODE_DARKEN_ONLY_LEGACY,
  LIGMA_LAYER_MODE_LIGHTEN_ONLY_LEGACY,
  LIGMA_LAYER_MODE_HSV_HUE_LEGACY,
  LIGMA_LAYER_MODE_HSV_SATURATION_LEGACY,
  LIGMA_LAYER_MODE_HSL_COLOR_LEGACY,
  LIGMA_LAYER_MODE_HSV_VALUE_LEGACY,
  LIGMA_LAYER_MODE_DIVIDE_LEGACY,
  LIGMA_LAYER_MODE_DODGE_LEGACY,
  LIGMA_LAYER_MODE_BURN_LEGACY,
  LIGMA_LAYER_MODE_HARDLIGHT_LEGACY,
  LIGMA_LAYER_MODE_SOFTLIGHT_LEGACY,
  LIGMA_LAYER_MODE_GRAIN_EXTRACT_LEGACY,
  LIGMA_LAYER_MODE_GRAIN_MERGE_LEGACY,
  LIGMA_LAYER_MODE_COLOR_ERASE_LEGACY,
  LIGMA_LAYER_MODE_OVERLAY,
  LIGMA_LAYER_MODE_LCH_HUE,
  LIGMA_LAYER_MODE_LCH_CHROMA,
  LIGMA_LAYER_MODE_LCH_COLOR,
  LIGMA_LAYER_MODE_LCH_LIGHTNESS,
  LIGMA_LAYER_MODE_NORMAL,
  LIGMA_LAYER_MODE_BEHIND,
  LIGMA_LAYER_MODE_MULTIPLY,
  LIGMA_LAYER_MODE_SCREEN,
  LIGMA_LAYER_MODE_DIFFERENCE,
  LIGMA_LAYER_MODE_ADDITION,
  LIGMA_LAYER_MODE_SUBTRACT,
  LIGMA_LAYER_MODE_DARKEN_ONLY,
  LIGMA_LAYER_MODE_LIGHTEN_ONLY,
  LIGMA_LAYER_MODE_HSV_HUE,
  LIGMA_LAYER_MODE_HSV_SATURATION,
  LIGMA_LAYER_MODE_HSL_COLOR,
  LIGMA_LAYER_MODE_HSV_VALUE,
  LIGMA_LAYER_MODE_DIVIDE,
  LIGMA_LAYER_MODE_DODGE,
  LIGMA_LAYER_MODE_BURN,
  LIGMA_LAYER_MODE_HARDLIGHT,
  LIGMA_LAYER_MODE_SOFTLIGHT,
  LIGMA_LAYER_MODE_GRAIN_EXTRACT,
  LIGMA_LAYER_MODE_GRAIN_MERGE,
  LIGMA_LAYER_MODE_VIVID_LIGHT,
  LIGMA_LAYER_MODE_PIN_LIGHT,
  LIGMA_LAYER_MODE_LINEAR_LIGHT,
  LIGMA_LAYER_MODE_HARD_MIX,
  LIGMA_LAYER_MODE_EXCLUSION,
  LIGMA_LAYER_MODE_LINEAR_BURN,
  LIGMA_LAYER_MODE_LUMA_DARKEN_ONLY,
  LIGMA_LAYER_MODE_LUMA_LIGHTEN_ONLY,
  LIGMA_LAYER_MODE_LUMINANCE,
  LIGMA_LAYER_MODE_COLOR_ERASE,
  LIGMA_LAYER_MODE_ERASE,
  LIGMA_LAYER_MODE_MERGE,
  LIGMA_LAYER_MODE_SPLIT,
  LIGMA_LAYER_MODE_PASS_THROUGH
} LigmaLayerMode;


void           ligma_enums_init           (void);

const gchar ** ligma_enums_get_type_names (gint *n_type_names);


G_END_DECLS

#endif /* __LIGMA_ENUMS_H__ */
